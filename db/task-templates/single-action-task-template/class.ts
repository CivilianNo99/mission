import { Id } from '/db/id.ts'
import { Kind } from '../common.ts'
import { Now } from "/utility/time.ts"
import { Due } from '/db/due-templates.ts'
import { Null, msec } from "/utility/ulib.ts"
import { Crg, JsonRepr } from "./typings.ts"
import { SingleActionTask } from '/db/tasks/single-action-task.ts'
import { store as TASKS_STORE } from '/db/tasks/store.ts'
import { TaskTemplate } from '../task-template.ts'

export class SingleActionTaskTemplate extends TaskTemplate {
  /** Due of tasks generated by this template. */
  due: Null<Due.DueTemplate> = null
  /** Description of this template and tasks generated by it. */
  description: string
  /** Creation date of this template. */
  creationDate: msec

  constructor(arg: Crg) {
    super(arg)
    this.description = arg.description
    this.creationDate = arg.creationDate
  }

  get kind() {
    return Kind.SingleActionTaskTemplate
  }

  create() {
    return SingleActionTask.new({
      id: Id(),
      due: this.due?.create() ?? null,
      isComplete: false,
      description: this.description,
      creationDate: Now(),
      completionDate: null,
    })
  }

  createAndSave() {
    return TASKS_STORE.addOne(this.create())
  }

  jsonify(): JsonRepr {
    return {
      ...super.jsonify(),
      due: this.due?.jsonify() ?? null,
      description: this.description,
      creationDate: this.creationDate,
    }
  }
}