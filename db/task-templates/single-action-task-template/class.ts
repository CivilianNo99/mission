import { Id } from "/db/id.ts"
import { Kind } from "../common.ts"
import { Temporal } from "npm:@js-temporal/polyfill"
import { DueTemplate } from "/db/due-templates.ts"
import { TASKS_STORE } from "/db/tasks/store.ts"
import { TaskTemplate } from "../task-template.ts"
import { SingleActionTask } from "/db/tasks/single-action-task.ts"
import { Crg, JsonRepr, NewArg } from "./typings.ts"

export class SingleActionTaskTemplate extends TaskTemplate {
  /** 
   * Description of `Task`s generated by this `TaskTemplate`. 
   */
  description: string
  /** 
   * `DueTemplate` of `Due`s for `Task`s generated by this `TaskTemplate`. 
   */
  dueTemplate: DueTemplate.DueTemplate
  /** 
   * When this `TaskTemplate` was created. 
   */
  creationInstant: Temporal.Instant

  constructor(arg: Crg) {
    super(arg)
    this.description = arg.description
    this.dueTemplate = arg.dueTemplate
    this.creationInstant = arg.creationInstant
  }

  get kind() {
    return Kind.SingleActionTaskTemplate
  }

  create() {
    return SingleActionTask.new({
      due: this.dueTemplate.create(),
      description: this.description,
    })
  }

  createAndSave() {
    return TASKS_STORE.addOne(this.create())
  }

  jsonify(): JsonRepr {
    return {
      ...super.jsonify(),
      description: this.description,
      dueTemplate: this.dueTemplate.jsonify(),
      creationInstant: this.creationInstant.toString(),
    }
  }

  static new(arg: NewArg) {
    return new SingleActionTaskTemplate({
      id: arg.id || Id(),
      description: arg.description,
      dueTemplate: arg.dueTemplate,
      creationInstant: Temporal.Now.instant(),
    })
  }
}